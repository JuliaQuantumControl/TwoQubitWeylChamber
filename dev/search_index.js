var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TwoQubitWeylChamber","category":"page"},{"location":"#TwoQubitWeylChamber","page":"Home","title":"TwoQubitWeylChamber","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TwoQubitWeylChamber is a Julia package for analyzing two-qubit gates in the Weyl chamber.  It is a partial port of the Python weylchamber package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The methods provided here allow to do an optimization for the entangling power of a two-qubit gate within the QuantumControl framework. See the examples for the optimization of a perfect entangler with the Krotov and GRAPE methods.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TwoQubitWeylChamber]","category":"page"},{"location":"#TwoQubitWeylChamber.D_PE-Tuple{Any}","page":"Home","title":"TwoQubitWeylChamber.D_PE","text":"Perfect-entanglers distance measure.\n\nD = D_PE(U; unitarity_weight=0.0, absolute_square=false)\n\nFor a given two-qubit gate U, this is defined via the local_invariants g_1, g_2, g_3 as\n\nD = g_3 sqrtg_1^2 + g_2^2 - g_1\n\nThis describes the geometric distance of the quantum gate from the polyhedron of perfect entanglers in the Weyl chamber.\n\nThis equation is only meaningful under the assumption that U is unitary. If the two-qubit level are a logical subspace embedded in a larger physical Hilbert space, loss of population from the logical subspace may lead to a non-unitary U. In this case, the unitarity measure can be added to the functional by giving a unitary_weight ∈ [0, 1) that specifies the relative proportion of the D term and the unitarity term.\n\nBy specifying absolute_square=true, the functional is modified as D  D², optimizing specifically for the boundary of the perfect entanglers polyhedron. This accounts for the fact that D can take negative values inside the polyhedron, as well as the W1 region of the Weyl chamber (the one adjacent to SWAP). This may be especially useful in a system with population loss (unitarity_weight > 0), as it avoids situations where the optimization goes deeper into the perfect entanglers while increasing population loss.\n\nwarning: Warning\nThe functional does not check which region of the Weyl chamber the quantum gate is in. When using this for an optimization where the guess leads to a point in the W1 region of the Weyl chamber (close to SWAP), the sign of the functional must be flipped, or else it will optimize for SWAP. Alternatively, use absolute_square=true.\n\ntip: Tip\nThe functional can be converted into the correct form for an optimization that uses one objective for each logical basis state by using QuantumControl.Functionals.gate_functional.\n\n\n\n\n\n","category":"method"},{"location":"#TwoQubitWeylChamber.canonical_gate-Tuple{Any, Any, Any}","page":"Home","title":"TwoQubitWeylChamber.canonical_gate","text":"Construct the canonical gate for the given Weyl chamber coordinates.\n\nÛ = canonical_gate(c₁, c₂, c₃)\n\nconstructs the two qubit gate U as\n\nU = expleftifracπ2 (c_1 σ_x σ_x + c_2 σ_y σ_y + c_3 σ_z σ_z)right\n\nwhere σ_xyz are the Pauli matrices.\n\n\n\n\n\n","category":"method"},{"location":"#TwoQubitWeylChamber.gate_concurrence-Tuple{Any, Any, Any}","page":"Home","title":"TwoQubitWeylChamber.gate_concurrence","text":"Calculate the maximum gate concurrence.\n\nC = gate_concurrence(U)\nC = gate_concurrence(c₁, c₂, c₃)\n\ncalculates that maximum concurrence C  0 1 that the two two-qubit gate U, respectively the gate described by the Weyl chamber coordinates c₁, c₂, c₃ (see weyl_chamber_coordinates) can generate.\n\nSee Kraus, Cirac, Phys. Rev. A 63, 062309 (2001)\n\n\n\n\n\n","category":"method"},{"location":"#TwoQubitWeylChamber.in_weyl_chamber-Tuple{Any, Any, Any}","page":"Home","title":"TwoQubitWeylChamber.in_weyl_chamber","text":"Check whether a given gate is in (a specific region of) the Weyl chamber.\n\nin_weyl_chamber(c₁, c₂, c₃)\n\nchecks whether c₁, c₂, c₃ are valid Weyl chamber coordinates.\n\nin_weyl_chamber(U; region=\"PE\")\nin_weyl_chamber(c₁, c₂, c₃; region=\"PE\")\n\nchecks whether the two-qubit gate U, respectively the gate described by the Weyl chamber coordinates c₁, c₂, c₃ (see weyl_chamber_coordinates) is a perfect entangler. The region can be any other of the regions returned by weyl_chamber_region.\n\n\n\n\n\n","category":"method"},{"location":"#TwoQubitWeylChamber.local_invariants-Tuple{Any}","page":"Home","title":"TwoQubitWeylChamber.local_invariants","text":"Calculate the local invariants g₁, g₂, g₃ for a two-qubit gate.\n\ng₁, g₂, g₃ = local_invariants(U)\n\n\n\n\n\n","category":"method"},{"location":"#TwoQubitWeylChamber.unitarity-Tuple{Any}","page":"Home","title":"TwoQubitWeylChamber.unitarity","text":"Unitarity of a matrix.\n\npop_loss = 1 - unitarity(U)\n\nmeasures the loss of population from the subspace described by U. E.g., for a two-qubit gate, U is a 4×4 matrix. The unitarity is defined as Retr(U^U)  N where N is the dimension of U.\n\n\n\n\n\n","category":"method"},{"location":"#TwoQubitWeylChamber.weyl_chamber_coordinates-Tuple{Any}","page":"Home","title":"TwoQubitWeylChamber.weyl_chamber_coordinates","text":"Calculate the Weyl chamber coordinates c₁, c₂, c₃ for a two-qubit gate.\n\nc₁, c₂, c₃ = weyl_chamber_coordinates(U)\n\ncalculates the Weyl chamber coordinates using the algorithm described in Childs et al., PRA 68, 052311 (2003).\n\n\n\n\n\n","category":"method"},{"location":"#TwoQubitWeylChamber.weyl_chamber_region-Tuple{Any, Any, Any}","page":"Home","title":"TwoQubitWeylChamber.weyl_chamber_region","text":"Identify which region of the Weyl chamber a given gate is located in.\n\nregion = weyl_chamber_region(U)\nregion = weyl_chamber_region(c₁, c₂, c₃)\n\nidentifies which region of the Weyl chamber the given two-qubit gate U, respectively the gate identified by the Weyl chamber coordinates c₁, c₂, c₃ (see weyl_chamber_coordinates) is in, as a string. Possible outputs are:\n\n\"PE\": gate is in the polyhedron of perfect entanglers.\n\"W0\": gate is between the identity and the perfect entanglers.\n\"W0*\": gate is between CPHASE(2π) and the perfect entanglers.\n\"W1\": gate is between SWAP and the perfect entanglers.\n\nFor invalid Weyl chamber coordinates, an empty string is returned.\n\n\n\n\n\n","category":"method"}]
}
